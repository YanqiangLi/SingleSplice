### Special note: this is a version for ASM output with the following adjustments
### 1. No normalization across samples
### 2. No limit on # of samples in ASM output files


0. Compilation
All binaries are available in the bin folder. Alternatively, the command lines to compile the code can be found in compile.txt.


1. Command line
1.1 Command line parameters
The command line to run the whole package is
diffsplice [-o output_directory] [-m full/rerun] [-s settings] [-a exon_junction_annotation] [-g gaf_gene_annotation] [-c chr_list] [-r runname] <data_manifest>

Optional parameters:
-a	Annotations of exons and splice junctions. If annotated exons and/or junctions are available, specify the path to the annotation files. See file description below.
-c	Chromosome list. Only work on the chromosomes specified in this list.
-g	GAF format gene annotation. The genes and their genomic coordinates listed in this file will be used to label the final result table. If this annotation is not available, the final table will give positions of differential events but no gene names.
-m	Running mode. Specify 'full' if this is the first time running or all steps should be re-executed. Specify 'rerun' to skip preprocessing and regenerate the results, for example, with a new set of parameters. See more details below.
-o	Output directory. Results generated by diffsplice will be put in the directory specified. New folder(s) will be created and populated if necessary.
-s	Settings. Specify the config file here. See file description below.
-r	Run name. Specify an alias to refer to this run.

Required parameters:
data_manifest	Samples of the data set. Specify the read files as well as the grouping of the samples in this file. See file format below.

1.2 Running diffsplice for the first time
The following is a command line example for running all steps of diffsplice:
nohup ./bin/diffsplice -o /home/project/DFS_test -m full -s config.txt -a resource/ -g resource/tcga_genes.gaf -r init datafile.txt

1.3 Re-running on the same data
A full run of diffsplice includes preprocessing, transcription analysis (splice graph reconstruction, isoform abundance inference, etc), and differential tests. The preprocessing step is only necessary for initial run or when the data set is changed. The diffsplice package allows you to skip the time-consuming preprocessing step and re-run only the core analyses (transcription and differential analyses) for the purpose of, for example, testing on a new set of parameters.
nohup ./bin/diffsplice -o /home/project/DFS_test -m rerun -s config.txt -a resource/ -g resource/tcga_genes.gaf -r test datafile.txt

1.4 Running differential transcription test on the same and entire data set but with a different grouping
Sometimes you may want to conduct a further analysis on a subset of the original data set, or to conduct a differential analysis on a different grouping of the original samples. You still hope to keep the transcription information for the entire data set, though. Only the differential test step should be changed. This could be achieved by running the differential analysis module alone, overriding the initial sample groups.
nohup ./bin/diff_asm_analysis /home/project/DFS_test/result/ /home/project/DFS_test/data/config_testtrans resource/tcga_genes.gaf /home/project/DFS_test/new_grouping/ testgroup.txt 
The first parameter is the result folder of the initial diffsplice run. Notice that the path '/home/project/DFS_test' should be the same as the output directory you have specified with '-o' in the original command line, and the 'result/' followed is the folder that diffsplice created itself to store the final results. The second parameter is the config file for differential test. Again, make sure that '/home/project/DFS_test' reflects the output directory you specified, and 'data/config_testtrans' should be already there. The third parameter lists the gene annotation file, same as the one you have given with '-g' option. The fourth parameter should give the output directory for the new results -- results generated according to the new grouping. Lastly, a tab-delimited text file should be given to list the new grouping. See below for its format.


2. Formats of configuration files
2.1 datafile.txt
This tab-delimited file specifies the read files in the experiment. Each line specifies a sample in the following format:
group_name	sample_name	bam_file_name
The fields 'group_name' and 'sample_name' can be any string without whitespace. The 'bam_file_name' field must give the full path to the bam file. Currently only BAM is supported.

2.2 config.txt
This tab-delimited file specifies the running parameters of diffsplice.

2.3 testgroup.txt (optional)
If you need to override the original setup of sample groups, this tab-delimited file is used to specify a new grouping for the differential transcription test. The format is as follows:
new_group_name	new_sample_alias	original_index	bam_file_name
The fields 'new_group_name' and 'new_sample_alias' can be any string without whitespace. The field 'original_index' must be an integer that specifies the index of the sample in the original sample set (as listed in datafile.txt). The field 'bam_file_name' is currently not used, but correctly listing the file name will definitely help checking whether the new grouping contains the desired samples.


3. Annotation files

3.1 The GAF parser provided by diffsplice
The diffsplice package includes an annotation parser, which currently only supports GAF format. Annotated splice junctions and exons will be extracted and put into folders 'some_folder/annotation_junction' and 'some_folder/annotation_exon', respectively. 

3.2 Custom annotation files for splice junctions
Custom annotation files may be provided if the annotation is not given in GAF format, for example. In such case, annotated splice junctions should still be put into a folder named 'some_folder/annotation_junction', and the path to 'some_folder' should be specified with the '-a' option in command line. Every chromosome will have a separate tab-delimited file in the folder, named after the chromosome name. The chromosome names of the annotation and the data must match. The format of the annotation file is:
chromosome	pos_start	pos_end	strand	ref_isoform	ref_gene.
The fields 'pos_start' and 'pos_end' are the genomic coordinates of the two splice sites of the annotated junction, with the lower site coming first. The strand field is either '+' or '-'. The last two fields represent the reference isoform and gene that contain the junction. Currently the first four fields are mandatory, the last two fields are not used and are optional.

3.3 Custom annotation files for exons
Similarly, custom annotation files may be provided for exons under the folder 'some_folder/annotation_exon', with path to 'some_folder' specified by '-a'. The format of the annotation file for each chromosome is the same to that of a junction annotation:
chromosome	pos_start	pos_end	strand	ref_isoform	ref_gene.
The fields 'pos_start' and 'pos_end' are the genomic coordinates of the boundaries of the annotated exon. The first four fields are mandatory.

3.4 Gene annotation for final results labeling
In the final result table, diffsplice will output the genomic coordinate of each locus with differential expression/transcription. An optional gene annotation can be supplied in GAF format to label the loci with gene names. If this locus-gene correspondence is desired, specify a GAF gene annotation using the '-g' option in command line.


4. Output
The main results will be the two tables 'differential_transcription.txt' and 'differential_expression.txt'. There are also GTF tracks which can be visualized using Genome Browser to examine the alternative splicing isoforms. Detailed explanation of all output files will be available later.


